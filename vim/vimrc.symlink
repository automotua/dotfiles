""""""""""
" Vundle "
""""""""""
" be iMproved, required
set nocompatible

" required
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" plugins
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'jiangmiao/auto-pairs'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'mattn/emmet-vim'
Plugin 'Valloric/MatchTagAlways'
Plugin 'Valloric/YouCompleteMe'
Plugin 'ternjs/tern_for_vim'
Plugin 'ervandew/supertab'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'burntsushi/ripgrep'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'dyng/ctrlsf.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'w0rp/ale'
Plugin 'junegunn/fzf.vim'
Plugin 'jeffkreeftmeijer/vim-numbertoggle'
Plugin 'galooshi/vim-import-js'
Plugin 'jamshedvesuna/vim-markdown-preview'
Plugin 'itchyny/lightline.vim'
Plugin 'mgee/lightline-bufferline'
Plugin 'ntpeters/vim-better-whitespace'

" plugins that are not actively used for now are disabled ATM to boost Vim speed
" and will be re-enabled if needed
"Plugin 'terryma/vim-multiple-cursors'
"Plugin 'chazy/cscope_maps'
"Plugin 'xolox/vim-misc'
"Plugin 'xolox/vim-easytags'
"Plugin 'DoxygenToolkit.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""
" settings "
""""""""""""
" solves backspace not working problem
set backspace=2

" Set syntax highlighting on
syntax on

" Insert space when tab key pressed
set expandtab

" Change the number of spaces for indentation to 2
set shiftwidth=2

" Set number of spaces when tab key pressed to 2
set tabstop=2

" Set softtabstop to 2
set softtabstop=2

" Show line number
set nu

" Use <Space> as leader key
let mapleader = " "

" <F2> to be pasting with format
set pastetoggle=<F2>

" Use Mac clipboard for copy
set clipboard=unnamed

" Make :Q also mean quit
command! -bar -bang Q quit<bang>

" Make :W also mean write
command! -bar -bang W write<bang>

" color scheme
set background=dark

" cursor line
set cursorline

" highlight current column toggle
nnoremap <leader>c :set cursorcolumn!<cr>

" Enable Mac touchpad scrolling
set mouse=a

" Move lines up / down
nnoremap <S-Down> :m .+1<CR>==
nnoremap <S-Up> :m .-2<CR>==
inoremap <S-Down> <Esc>:m .+1<CR>==gi
inoremap <S-Up> <Esc>:m .-2<CR>==gi
vnoremap <S-Down> :m '>+1<CR>gv=gv
vnoremap <S-Up> :m '<-2<CR>gv=gv

" Short cut for window switching
map <c-h> <c-w>h
map <c-l> <c-w>l
map <c-j> <c-w>j
map <c-k> <c-w>k

" Window resizing by +/- 5 rows/cols
nnoremap <F6> :vertical resize -10<cr>
nnoremap <F7> :resize +10<cr>
nnoremap <F8> :resize -10<cr>
nnoremap <F9> :vertical resize +10<cr>

" Open new split window to right and bottom
set splitbelow
set splitright

" Map ,'s original meaning to \:
noremap \ ,

" sets incremental search
set incsearch

" Highlight search
set hlsearch

" Smart case search
set ignorecase
set smartcase

" Press comma to stop hlsearch
nnoremap <silent> , :nohlsearch<Bar>:echo<CR>

" k, j is also gk gj
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
noremap  <buffer> <silent> 0 g0
noremap  <buffer> <silent> $ g$

" Simple folding based on indent, syntax fold method has all the sluggish
set foldmethod=indent

" open most folds by default
set foldlevelstart=10

" 10 nested fold max
set foldnestmax=10

" Make Y to yank to the end of line, not entire line
map Y y$

" Save
nmap <leader>s :w<cr>

" Close current window
nmap <leader>w :q<cr>

" Close all windows
nmap <leader>qq :qa<cr>

" Make * command stay at current word
nnoremap * *N

" Don't open preview window for auto-complete
set completeopt-=preview

" Change dropdown menu color
highlight Pmenu ctermfg=15 ctermbg=0 guifg=#ffffff guibg=#000000
highlight PmenuSel ctermfg=0 ctermbg=7 guifg=#000000 guibg=#000007

" When Pmenu is shown, remap Ctrl-N and Ctrl-P to arrow keys to prevent flashing
inoremap <expr> <C-N> pumvisible() ? "<Down>" : "<C-N>"
inoremap <expr> <C-P> pumvisible() ? "<Up>" : "<C-P>"

" Let's live in a world with no swap files
set noswapfile

" Set column width 80
set textwidth=80

" Notify column width limit
set colorcolumn=+1        " highlight column after 'textwidth'
highlight ColorColumn ctermbg=black guibg=black

" Enable project-specific .vimrc. See 'set secure' at the end
set exrc

" Always open help in bottom right window
nnoremap <leader>h :vert help<Space>

" Search whole word by pressing ?
nmap ? /\<\><Left><Left>

" Close all other windows, leaving only current window open
nmap <leader>o :only<cr>

" Close all buffers except for the current one
nmap <leader>oo :%bd <BAR> e # <BAR> bd #<cr>

" Triger `autoread` when files changes on disk
" NB: this setup will still require some manual work to trigger.
"     You need to either
"     1) move your cursor AND then wait for updatetime, or
"     2) switch buffer and switch back
"     For file changes due to `git pull`, 2) is probably better
" See https://unix.stackexchange.com/a/383044

" Set autoread when file is changed outside of Vim
set autoread

" Set CursorHold detection time to be 2s
set updatetime=2000

augroup AutoTriggerAutoread
  autocmd!
  " Trigger autoread when the following events happen
  autocmd BufEnter,CursorHold,CursorHoldI *
        \ if mode() != 'c' | checktime | endif
  " Give a warning message
  autocmd FileChangedShellPost *
        \ echohl WarningMsg
        \ | echo "File changed on disk. Buffer reloaded."
        \ | echohl None
augroup END

"""""""""""""""""""
" dyng/ctrlsf.vim "
"""""""""""""""""""
" Input :CtrlSF in command line, can start typing afterwards
nmap <leader>ff <Plug>CtrlSFPrompt

" Toggle search result window
nnoremap <leader>ft :CtrlSFToggle<CR>

" Input :CtrlSF foo in command line where foo is the current visual selected
" word, waiting for further input.
vmap <leader>ff <Plug>CtrlSFVwordPath

" Use rg as backend, see comparison: https://blog.burntsushi.net/ripgrep/
let g:ctrlsf_ackprg = '/usr/local/bin/rg'

" Don't close result window when some result file is opened
let g:ctrlsf_auto_close = 0

" Set default root to be project. CtrlSF locates project root by searching VCS
" root (.git, .hg, .svn, etc.)
let g:ctrlsf_default_root = 'project+fw'

" Set window size to be 30%
let g:ctrlsf_winsize = '30%'

"""""""""""""""""""""""""""""""""
" jeetsukumaran/vim-buffergator "
"""""""""""""""""""""""""""""""""
" Make buffer to be in foreground
set hidden

" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'B'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Limit buffer list window size to be 10 rows
let g:buffergator_split_size = 10

" Sort the buffers by MRU
let g:buffergator_sort_regime = 'mru'

" Cycle buffers globally, not w.r.t. window
let g:buffergator_mru_cycle_local_to_window = 0

" Go to the previous buffer displayed at the top
nmap <leader>a :BuffergatorMruCyclePrev<cr>

" Go to the next buffer displayed at the top
nmap <leader>f :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>g :BuffergatorToggle<cr>

" New empty buffer
nmap <leader>n :enew<cr>

" Close the buffer
nmap <leader>q :bp <BAR> bd #<cr>

"""""""""""""""""""""""
"" ctrlpvim/ctrlp.vim "
"""""""""""""""""""""""
"" Maps ctrlp to Ctrl + P
"let g:ctrlp_map = '<c-p>'

"" Use mixed mode: files + MRU + current buffer
"let g:ctrlp_cmd = 'CtrlPMixed'

"" Search filename only
"let g:ctrlp_by_filename = 1

"" Use the nearest .git directory as the cwd, then
"let g:ctrlp_working_path_mode = 'ra'

"" Setup some default ignores
"let g:ctrlp_custom_ignore = {
  "\ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  "\ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
"\}

"" Include current file in
"let g:ctrlp_match_current_file = 1

"""""""""""""""""""""""""""
" jistr/vim-nerdtree-tabs "
"""""""""""""""""""""""""""
" Open/close NERDTree Tabs with <leader>t
nmap <silent> <leader>t :NERDTreeTabsToggle<CR>

""""""""""""""""""""""""""""""""
"" xolox/vim-easytags settings "
""""""""""""""""""""""""""""""""
"set cpo+=d
"" Where to look for tags files
"set tags=./.git/tags;,~/.vimtags
"" Sensible defaults
"let g:easytags_events = ['BufReadPost', 'BufWritePost']
"let g:easytags_async = 1
"let g:easytags_dynamic_files = 2
"let g:easytags_resolve_links = 1
"let g:easytags_suppress_ctags_warning = 1

""""""""""""""""""""""""""""
" You-Complete-Me settings "
""""""""""""""""""""""""""""
" Go to definition or declaration if definition can't be found
nnoremap <silent> <leader>b :YcmCompleter GoTo<cr>

" global ycm extra conf for c family
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

" don't use ycm's syntax checking, I have syntactic
let g:ycm_show_diagnostics_ui = 0

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"""""""""""""""""""
" mattn/emmet-vim "
"""""""""""""""""""
" make emmet compatible with jsx (expands to className, etc.)
let g:user_emmet_settings = {
\ 'javascript.jsx' : {
  \ 'extends' : 'jsx',
  \},
\}

""""""""""""
" w0rp/ale "
""""""""""""
" Less aggressive than the default
let g:ale_sign_error = '‚óè'
let g:ale_sign_warning = '.'

" Less distracting when opening a new file
let g:ale_lint_on_enter = 0

""""""""""""""""""""
" junegunn/fzf.vim "
""""""""""""""""""""
" put fzf in runtime path
set rtp+=/usr/local/opt/fzf

" still Ctrl-P, but it's fzf underneath
nnoremap <C-P> :Files<cr>

" / search history
nnoremap <C-R>/ :History/<cr>

" : command history
nnoremap <C-R>: :History:<cr>

"""""""""""""""""""""""""""""""""""""
" jeffkreeftmeijer/vim-numbertoggle "
"""""""""""""""""""""""""""""""""""""
" try out this plugin for hybrid number toggle
set number relativenumber

""""""""""""""""""""""""""""""""""""""
" jamshedvesuna/vim-markdown-preview "
""""""""""""""""""""""""""""""""""""""
" change hotkey to avoid conflict
let vim_markdown_preview_hotkey = '<C-M>'

" preview markdown on buffer write
let vim_markdown_preview_toggle = 2

" remove the markdown html file after opening it
let vim_markdown_preview_temp_file=1

" use Google Chrome because it's fast
let vim_markdown_preview_browser='Google Chrome'

"""""""""""""""""""""""""
" itchyny/lightline.vim "
"""""""""""""""""""""""""
" make lightline statusline to be always on
set laststatus=2

"""""""""""""""""""""""""""""
" mgee/lightline-bufferline "
"""""""""""""""""""""""""""""
" always show tabline
set showtabline=2

" following sample configs
let g:lightline#bufferline#show_number  = 1
let g:lightline#bufferline#shorten_path = 1
let g:lightline#bufferline#unnamed      = '[No Name]'
let g:lightline                  = {}
let g:lightline.tabline          = {'left': [['buffers']], 'right': [['close']]}
let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}

"""""""""""""""""""""""
" scrooloose/nerdtree "
"""""""""""""""""""""""
" hide the 'Press ? for help'
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

""""""""""""""""""""""""""""""""""
" ntpeters/vim-better-whitespace "
""""""""""""""""""""""""""""""""""
" disable highlighting
let g:better_whitespace_enabled = 1

" remove trailing whitespaces for following filetypes:
augroup StripWhitesapce
  autocmd!
  autocmd FileType c,cpp,java,php,ruby,python,vim,javascript,jsx,html EnableStripWhitespaceOnSave
augroup END

""""""""""""""""""""""""
" Has to be at the end "
""""""""""""""""""""""""
" Due to project-specific .vimrc, need to enable secure mode to prevent
" autocmd, shell and write commands from being run inside project-specific
" .vimrc files unless they‚Äôre owned by me
set secure
